version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: gita-rag-backend-prod
    ports:
      - "8000:8000"
    volumes:
      - ./dataset:/app/dataset:ro
      - transformers_cache:/app/.cache
    environment:
      - PYTHONPATH=/app
      - TRANSFORMERS_CACHE=/app/.cache
      - CORS_ORIGINS=${CORS_ORIGINS:-https://your-domain.com}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - gita-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-https://api.your-domain.com}
    container_name: gita-rag-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gita-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: gita-rag-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - gita-network
    restart: unless-stopped
    profiles:
      - cache

  # Optional: Nginx reverse proxy (if needed)
  nginx:
    image: nginx:alpine
    container_name: gita-rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - gita-network
    restart: unless-stopped
    profiles:
      - proxy

networks:
  gita-network:
    driver: bridge

volumes:
  transformers_cache:
    driver: local
  redis_data:
    driver: local
